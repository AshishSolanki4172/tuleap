<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

use Symfony\Component\Console\Output\OutputInterface;

final readonly class AffectedValuesSearcher
{
    public function __construct(
        private DatabaseQuerier $querier,
        private OutputInterface $output,
        private bool $verbose_mode,
    ) {
    }

    public function search(): MissingChangesetDocument
    {
        $this->output->writeln('Searching...');
        /**
         * Filter on changeset_value_id <= MAX(tracker_changeset.id)
         * Since the changeset_id was wrongly used, all rows > MAX(changeset_id) were never affected by the issue.
         */
        $max_changeset_id = $this->querier->getMaxChangesetIdentifier();
        $this->output->writeln(sprintf("Maximum changeset_id = '%s'", $max_changeset_id));

        $estimated_update_date        = $this->querier->getEstimatedDateOfUpdateToVersionHigherThan1411();
        $estimated_update_date_report = sprintf(
            "Estimated date of update to Tuleap higher than 14.11 = '%s'\n",
            $estimated_update_date
        );

        $values_to_scrutinize = $this->fetchCollectionOfValuesToScrutinize($max_changeset_id);
        $easy_values          = [];
        $hard_values          = [];
        foreach ($values_to_scrutinize as $value) {
            if ($value->isAHardField()) {
                $hard_values[] = $value;
                continue;
            }
            $easy_values[] = $value;
        }

        $easy_collection = $this->filterAffectedFieldValues($easy_values, false);
        $this->output->write($easy_collection->report() . $estimated_update_date_report);

        $hard_collection = $this->filterAffectedFieldValues($hard_values, true);
        $this->output->write($hard_collection->report() . $estimated_update_date_report);
        $this->output->writeln('End of report');

        return $this->createMissingChangesetDocument([...$easy_collection->values, ...$hard_collection->values]);
    }

    /**
     * @psalm-return list<FieldValue>
     */
    private function fetchCollectionOfValuesToScrutinize(int $max_changeset_id): array
    {
        /** @var list<FieldValue> $suspected_values */
        $suspected_values = [];

        $rows = $this->querier->getAllChangesetValuesToScrutinize($max_changeset_id);
        foreach ($rows as $row) {
            $changeset_value_id  = $row['cv_id'];
            $artifact_id         = $row['artifact_id'];
            $changeset_id        = $row['changeset_id'];
            $changeset_timestamp = $row['changeset_timestamp'];
            $field_name          = $row['field_name'];
            $field_type          = $row['field_type'];

            $suspected_values[] = new FieldValue(
                $changeset_value_id,
                $artifact_id,
                $changeset_id,
                $changeset_timestamp,
                $field_type,
                $field_name
            );
        }
        return $suspected_values;
    }

    /**
     * @param list<FieldValue> $suspected_values
     */
    private function filterAffectedFieldValues(array $suspected_values, bool $is_hard): CollectionOfAffectedValues
    {
        $ids           = array_map(
            static fn(FieldValue $value) => $value->changeset_value_id,
            $suspected_values
        );
        $affected_rows = $this->querier->getChangesetValuesPossiblyAffected($ids);

        $values_affected = [];
        foreach ($suspected_values as $value) {
            foreach ($affected_rows as $row) {
                if ($row['id'] === $value->changeset_value_id) {
                    $values_affected[] = $value;
                }
            }
        }
        return new CollectionOfAffectedValues($values_affected, $is_hard, $this->verbose_mode);
    }

    /**
     * @psalm-param list<FieldValue> $values
     */
    private function createMissingChangesetDocument(array $values): MissingChangesetDocument
    {
        $text          = [];
        $list          = [];
        $computed      = [];
        $float         = [];
        $int           = [];
        $date          = [];
        $file          = [];
        $openlist      = [];
        $artifact_link = [];
        $perms         = [];

        foreach ($values as $value) {
            match ($value->field_type) {
                'string', 'text' => $text[]        = $value->changeset_value_id,
                'sb', 'cb', 'msb', 'rb' => $list[] = $value->changeset_value_id,
                'computed' => $computed[]          = $value->changeset_value_id,
                'float' => $float[]                = $value->changeset_value_id,
                'int' => $int[]                    = $value->changeset_value_id,
                'date' => $date[]                  = $value->changeset_value_id,
                'file' => $file[]                  = $value->changeset_value_id,
                'tbl' => $openlist[]               = $value->changeset_value_id,
                'art_link' => $artifact_link[]     = $value->changeset_value_id,
                'perm' => $perms[]                 = $value->changeset_value_id,
                default => null, // Do nothing, other fields are not affected by CVE-2024-30246
            };
        }

        return new MissingChangesetDocument($text, $list, $computed, $float, $int, $date, $file, $openlist, $artifact_link, $perms);
    }
}
