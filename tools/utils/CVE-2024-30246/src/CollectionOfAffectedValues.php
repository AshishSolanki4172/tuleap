<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

final readonly class CollectionOfAffectedValues
{
    /**
     * @param list<FieldValue> $values
     */
    public function __construct(
        public array $values,
        private bool $is_hard,
        private bool $verbose_mode,
    ) {
    }

    public function report(): string
    {
        $last_changeset_timestamp = 0;
        foreach ($this->values as $value) {
            if ($value->changeset_timestamp > $last_changeset_timestamp) {
                $last_changeset_timestamp = $value->changeset_timestamp;
            }
        }
        $formatted_last_changeset_timestamp = (new \DateTimeImmutable('@' . $last_changeset_timestamp))->format('c');
        $date_report                        = sprintf(
            "Submission date of the last affected changeset: '%s'\n",
            $formatted_last_changeset_timestamp
        );

        if (! $this->verbose_mode) {
            /** @var array<int, null> $artifact_map */
            $artifact_map = [];
            foreach ($this->values as $value) {
                $artifact_map[$value->artifact_id] = null;
            }
            $number_of_affected_artifacts = count(array_keys($artifact_map));

            if (! $this->is_hard) {
                $number_report = sprintf(
                    "Number of artifacts definitely affected: %s\n",
                    $number_of_affected_artifacts
                );
            } else {
                $number_report = sprintf(
                    "Number of artifacts that might be affected: %s\n",
                    $number_of_affected_artifacts
                );
            }
            return $number_report . $date_report;
        }

        $report = (! $this->is_hard)
            ? "The following field values are definitely affected:\n"
            : "The following field values might be affected:\n";
        if (count($this->values) === 0) {
            $report .= "No field value identified\n";
            return $report;
        }
        foreach ($this->values as $value) {
            $report .= $value->report() . "\n";
        }
        return $report . $date_report;
    }
}
