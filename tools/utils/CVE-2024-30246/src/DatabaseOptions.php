<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;

/**
 * @psalm-immutable
 */
final readonly class DatabaseOptions
{
    private const DB_HOST_OPTION      = 'dbhost';
    private const DB_PORT_OPTION      = 'dbport';
    private const DB_NAME_OPTION      = 'dbname';
    private const DB_USER_NAME_OPTION = 'dbusername';
    private const DB_PASSWORD_OPTION  = 'dbpassword';
    private const DB_USE_TLS          = 'dbssl';
    private const DB_TLS_VERIFY_CERT  = 'dbsslverifydisable';
    private const DB_TLS_CERT_PATH    = 'dbsslcertpath';

    private function __construct(
        public string $database_host,
        public int $database_port,
        public string $database_name,
        public string $user_name,
        public string $password,
        public bool $use_tls,
        public bool $tls_verify_disable,
        public string $tls_ca_path,
    ) {
    }

    public static function buildFromConsoleInputs(InputInterface $input, OutputInterface $output, QuestionHelper $question_helper): ?self
    {
        $db_host               = $input->getOption(self::DB_HOST_OPTION);
        $db_port               = (int) $input->getOption(self::DB_PORT_OPTION);
        $db_name               = $input->getOption(self::DB_NAME_OPTION);
        $db_user_name          = $input->getOption(self::DB_USER_NAME_OPTION);
        $db_password           = $input->getOption(self::DB_PASSWORD_OPTION);
        $db_tls                = ($input->getOption(self::DB_USE_TLS) !== false);
        $db_tls_no_cert_verify = ($input->getOption(self::DB_TLS_VERIFY_CERT) !== false);
        $db_tls_cert_ca_path   = (string) $input->getOption(self::DB_TLS_CERT_PATH);


        if ($db_host === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_HOST_OPTION));
            return null;
        }
        if ($db_port === 0) {
            $output->writeln(sprintf('--%s option is required', self::DB_PORT_OPTION));
            return null;
        }
        if ($db_name === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_NAME_OPTION));
            return null;
        }
        if ($db_user_name === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_USER_NAME_OPTION));
            return null;
        }

        if ($db_password === null) {
            $question = new Question(sprintf("Password for DB user '%s':", $db_user_name), null);
            $question->setHidden(true);
            $question->setHiddenFallback(false);

            do {
                $db_password = $question_helper->ask($input, $output, $question);
            } while (! is_string($db_password));
        }

        return new self(
            $db_host,
            $db_port,
            $db_name,
            $db_user_name,
            $db_password,
            $db_tls,
            $db_tls_no_cert_verify,
            $db_tls_cert_ca_path
        );
    }

    /**
     * @psalm-return list<InputOption>
     */
    public static function getConsoleInputOptions(): array
    {
        return [
            new InputOption(self::DB_HOST_OPTION, null, InputOption::VALUE_REQUIRED, 'DB host', '127.0.0.1'),
            new InputOption(self::DB_PORT_OPTION, null, InputOption::VALUE_REQUIRED, 'DB port', '3306'),
            new InputOption(self::DB_NAME_OPTION, null, InputOption::VALUE_REQUIRED, 'DB name', 'tuleap'),
            new InputOption(self::DB_PASSWORD_OPTION, null, InputOption::VALUE_OPTIONAL, 'DB user password'),
            new InputOption(self::DB_USER_NAME_OPTION, null, InputOption::VALUE_REQUIRED, 'DB user name', 'tuleapadm'),
            new InputOption(self::DB_USE_TLS, null, InputOption::VALUE_OPTIONAL, 'Should we use TLS to connect to the DB?', false),
            new InputOption(self::DB_TLS_VERIFY_CERT, null, InputOption::VALUE_OPTIONAL, 'Should we NOT verify the DB certificate when using TLS?', false),
            new InputOption(self::DB_TLS_CERT_PATH, null, InputOption::VALUE_OPTIONAL, 'CA certificate to use to verify the DB certificate when using TLS', '/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem'),
        ];
    }
}
