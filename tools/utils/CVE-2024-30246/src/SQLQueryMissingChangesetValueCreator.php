<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

use Symfony\Component\Console\Output\OutputInterface;

final readonly class SQLQueryMissingChangesetValueCreator
{
    public function __construct(
        private DatabaseQuerier $querier,
        private OutputInterface $output,
    ) {
    }

    public function createSQLQueriesForMissingChangesetValues(MissingChangesetDocument $missing_changeset_document): string
    {
        $this->output->writeln('Checking text fields...');
        $sql_queries = $this->createSQLQueriesForTable('tracker_changeset_value_text', $missing_changeset_document->text);
        $this->output->writeln('Checking list fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_list', $missing_changeset_document->list);
        $this->output->writeln('Checking computed fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_computedfield_manual_value', $missing_changeset_document->computed);
        $this->output->writeln('Checking float fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_float', $missing_changeset_document->float);
        $this->output->writeln('Checking int fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_int', $missing_changeset_document->int);
        $this->output->writeln('Checking date fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_date', $missing_changeset_document->date);
        $this->output->writeln('Checking file fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_file', $missing_changeset_document->file);
        $this->output->writeln('Checking openlist fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_openlist', $missing_changeset_document->openlist);
        $this->output->writeln('Checking artifact link fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_artifactlink', $missing_changeset_document->artifact_link);
        $this->output->writeln('Checking permissions on artifact fields...');
        $sql_queries .= $this->createSQLQueriesForTable('tracker_changeset_value_permissionsonartifact', $missing_changeset_document->perms);

        return $sql_queries;
    }

    /**
     * @psalm-param literal-string $table_name
     * @psalm-param list<int> $changeset_value_ids
     */
    private function createSQLQueriesForTable(string $table_name, array $changeset_value_ids): string
    {
        $queries = '';

        $query_template = 'INSERT INTO %s (%s) VALUES (%s) ON DUPLICATE KEY UPDATE changeset_value_id=changeset_value_id';

        foreach ($this->querier->getChangesetValueRows($table_name, $changeset_value_ids) as $row) {
            $columns = array_keys($row);
            $values  = [];
            foreach ($columns as $column) {
                $value = $row[$column];
                if ($value === null) {
                    $value = 'NULL';
                } elseif (is_string($value)) {
                    $value = $this->querier->quote($value);
                }
                $values[] = $value;
            }

            $queries .= sprintf($query_template, $table_name, implode(',', $columns), implode(', ', $values)) . "\n";
        }


        return $queries;
    }
}
