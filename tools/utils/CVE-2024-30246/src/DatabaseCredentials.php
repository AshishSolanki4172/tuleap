<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;

/**
 * @psalm-immutable
 */
final readonly class DatabaseCredentials
{
    public const DB_HOST_OPTION      = 'dbhost';
    public const DB_NAME_OPTION      = 'dbname';
    public const DB_USER_NAME_OPTION = 'dbusername';
    public const DB_PASSWORD_OPTION  = 'dbpassword';

    private function __construct(
        public string $database_host,
        public string $database_name,
        public string $user_name,
        public string $password,
    ) {
    }

    public static function buildFromConsoleInputs(InputInterface $input, OutputInterface $output, QuestionHelper $question_helper): ?self
    {
        $db_host      = $input->getOption(self::DB_HOST_OPTION);
        $db_name      = $input->getOption(self::DB_NAME_OPTION);
        $db_user_name = $input->getOption(self::DB_USER_NAME_OPTION);
        $db_password  = $input->getOption(self::DB_PASSWORD_OPTION);

        if ($db_host === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_HOST_OPTION));
            return null;
        }
        if ($db_name === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_NAME_OPTION));
            return null;
        }
        if ($db_user_name === null) {
            $output->writeln(sprintf('--%s option is required', self::DB_USER_NAME_OPTION));
            return null;
        }

        if ($db_password === null) {
            $question = new Question(sprintf("Password for DB user '%s':", $db_user_name), null);
            $question->setHidden(true);
            $question->setHiddenFallback(false);

            do {
                $db_password = $question_helper->ask($input, $output, $question);
            } while (! is_string($db_password));
        }

        return new self($db_host, $db_name, $db_user_name, $db_password);
    }
}
