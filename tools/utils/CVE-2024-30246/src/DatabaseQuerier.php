<?php
/**
 * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Enalean\Cve202430246;

final readonly class DatabaseQuerier
{
    private const MAX_CHUNK_SIZE = 100;

    private \PDO $pdo;

    public function __construct(DatabaseOptions $db_options)
    {
        $pdo_options = null;

        if ($db_options->use_tls) {
            $pdo_options = [
                \PDO::MYSQL_ATTR_SSL_CA => $db_options->tls_ca_path,
                \PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT => ! $db_options->tls_verify_disable,
            ];
        }

        $this->pdo = new \PDO(
            sprintf(
                'mysql:dbname=%s;host=%s;port=%d;charset=utf8mb4',
                $db_options->database_name,
                $db_options->database_host,
                $db_options->database_port,
            ),
            $db_options->user_name,
            $db_options->password,
            $pdo_options
        );
        $this->pdo->setAttribute(
            \PDO::ATTR_EMULATE_PREPARES,
            false
        );
        $this->pdo->setAttribute(
            \PDO::ATTR_ERRMODE,
            \PDO::ERRMODE_EXCEPTION
        );
        $this->pdo->setAttribute(
            \PDO::ATTR_DEFAULT_FETCH_MODE,
            \PDO::FETCH_ASSOC
        );
    }

    public function getMaxChangesetIdentifier(): int
    {
        $statement = $this->pdo->query('SELECT MAX(tracker_changeset.id) FROM tracker_changeset');
        $column    = $statement->fetchColumn(0);
        return (int) $column;
    }

    public function getEstimatedDateOfUpdateToVersionHigherThan1411(): string
    {
        $sql       = <<<EOSQL
        SELECT forge_upgrade_bucket.end_date
        FROM forge_upgrade_bucket
        WHERE script = '/usr/share/tuleap/src/db/mysql/updates/2023/202307311608_add_passwordless_only_column_user_table.php'
        EOSQL;
        $statement = $this->pdo->query($sql);
        $column    = $statement->fetchColumn(0);
        return (string) $column;
    }

    /**
     * @psalm-return list<{cv_id: int, changeset_id: int, changeset_timestamp: int, field_type: string, field_name: string, artifact_id: int}>
     */
    public function getAllChangesetValuesToScrutinize(int $max_changeset_id): array
    {
        $sql = <<<EOSQL
        SELECT
            cv.id as cv_id,
            cs.id as changeset_id,
            cs.submitted_on as changeset_timestamp,
            f.formElement_type AS field_type,
            f.name as field_name,
            cs.artifact_id
        FROM tracker_changeset_value cv
        JOIN tracker_field f ON (f.id = cv.field_id)
        JOIN tracker_changeset cs ON (cs.id = cv.changeset_id)
        JOIN tracker_artifact a ON (a.id = cs.artifact_id)
        JOIN tracker t ON (t.id = a.tracker_id)
        JOIN `groups` g ON (g.group_id = t.group_id)
        WHERE g.status = 'A'
        AND t.deletion_date IS NULL
        AND f.use_it = 1
        AND cv.id <= ?
        ORDER BY cs.id ASC
        EOSQL;

        $statement = $this->pdo->prepare($sql);
        $statement->bindValue(1, $max_changeset_id, \PDO::PARAM_INT);
        $statement->execute();
        return $statement->fetchAll();
    }

    /**
     * @param list<int> $changeset_value_ids
     * @return list<array{id: int}>
     */
    public function getChangesetValuesPossiblyAffected(
        array $changeset_value_ids,
    ): array {
        $values = [];

        $changeset_value_ids_chunks = array_chunk($changeset_value_ids, self::MAX_CHUNK_SIZE);
        foreach ($changeset_value_ids_chunks as $changeset_value_ids_chunk) {
            $in_statement = implode(',', array_map(static fn() => '?', $changeset_value_ids_chunk));

            $sql = <<<EOSQL
            SELECT tcv.id FROM tracker_changeset_value AS tcv
                 LEFT JOIN tracker_changeset_value_text ON (tcv.id = tracker_changeset_value_text.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_list ON (tcv.id = tracker_changeset_value_list.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_computedfield_manual_value ON (tcv.id = tracker_changeset_value_computedfield_manual_value.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_date ON (tcv.id = tracker_changeset_value_date.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_float ON (tcv.id = tracker_changeset_value_float.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_int ON (tcv.id = tracker_changeset_value_int.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_file ON (tcv.id = tracker_changeset_value_file.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_openlist ON (tcv.id = tracker_changeset_value_openlist.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_artifactlink ON (tcv.id = tracker_changeset_value_artifactlink.changeset_value_id)
                 LEFT JOIN tracker_changeset_value_permissionsonartifact ON (tcv.id = tracker_changeset_value_permissionsonartifact.changeset_value_id)
            WHERE tcv.id IN ($in_statement)
                 AND tracker_changeset_value_text.changeset_value_id IS NULL
                 AND tracker_changeset_value_list.changeset_value_id IS NULL
                 AND tracker_changeset_value_computedfield_manual_value.changeset_value_id IS NULL
                 AND tracker_changeset_value_date.changeset_value_id IS NULL
                 AND tracker_changeset_value_float.changeset_value_id IS NULL
                 AND tracker_changeset_value_int.changeset_value_id IS NULL
                 AND tracker_changeset_value_file.changeset_value_id IS NULL
                 AND tracker_changeset_value_openlist.changeset_value_id IS NULL
                 AND tracker_changeset_value_artifactlink.changeset_value_id IS NULL
                 AND tracker_changeset_value_permissionsonartifact.changeset_value_id IS NULL
            EOSQL;

            $statement = $this->pdo->prepare($sql);
            $statement->execute($changeset_value_ids_chunk);
            $values = [...$values, ...$statement->fetchAll()];
        }

        return $values;
    }

    /**
     * @psalm-param string $table_name
     * @psalm-param list<int> $changeset_value_ids
     * @psalm-return list<array<string, mixed>>
     */
    public function getChangesetValueRows(string $table_name, array $changeset_value_ids): array
    {
        $values = [];

        $changeset_value_ids_chunks = array_chunk($changeset_value_ids, self::MAX_CHUNK_SIZE);
        foreach ($changeset_value_ids_chunks as $changeset_value_ids_chunk) {
            $in_statement = implode(',', array_map(static fn() => '?', $changeset_value_ids_chunk));

            $sql = "SELECT * FROM $table_name WHERE changeset_value_id IN ($in_statement)";

            $statement = $this->pdo->prepare($sql);
            $statement->execute($changeset_value_ids_chunk);
            $values = [...$values, ...$statement->fetchAll()];
        }

        return $values;
    }

    public function quote(string $value): string
    {
        return $this->pdo->quote($value);
    }
}
