#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker-rpm'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only -v /nix -v /root'
                }
            }
            steps {
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        sh """
                        # nix-daemon needs root (for now)
                        su-exec-nixdaemon root sh -c 'TMPDIR=/tmp/tuleap_build/ nix-daemon' &
                        tools/utils/scripts/generated-files-builder.sh dev
                        """
                    }
                }
            }
        }

        stage('Check lockfiles') {
            steps { script {
                actions = load 'sources/tests/actions.groovy'
                actions.runFilesStatusChangesDetection('.', 'lockfiles', 'composer.lock')
            } }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('Translations: check .po files') {
                    steps { script {
                        actions.runFilesStatusChangesDetection('.', 'translation files', '"*.po\$"')
                    } }
                }
                stage('ESLint static analysis') {
                    agent {
                        dockerfile {
                            dir 'sources/tools/utils/nix/'
                            filename 'build-tools.dockerfile'
                            reuseNode true
                            args '--network none'
                        }
                    }
                    steps { script { actions.runESLint() } }
                }
                stage('SCSS coding standards') {
                    agent {
                        dockerfile {
                            dir 'sources/tools/utils/nix/'
                            filename 'build-tools.dockerfile'
                            reuseNode true
                            args '--network none'
                        }
                    }
                    steps { script { actions.runStylelint() } }
                }
                stage ('JS Unit tests') {
                    agent {
                        dockerfile {
                            dir 'sources/tools/utils/nix/'
                            filename 'build-tools.dockerfile'
                            reuseNode true
                            args '--network none --tmpfs /tmp/js_test_cache:rw,noexec,nosuid -e TMPDIR=/tmp/js_test_cache/'
                        }
                    }
                    steps { script { actions.runJSUnitTests('.') } }
                    post { always { junit 'results/js-test-results/junit-*.xml' } }
                }
            }
        }

        stage('Publish') {
            agent {
                dockerfile {
                    dir 'sources/tools/utils/nix/'
                    filename 'build-tools.dockerfile'
                    reuseNode true
                    args '--tmpfs /tmp:rw,noexec,nosuid --read-only'
                }
            }
            steps {
                dir ('sources') {
                    withCredentials([string(credentialsId: 'NPM_TOKEN', variable: 'NPM_TOKEN')]) {
                        sh '''
                        export HOME=/tmp/tuleap_build
                        mkdir /tmp/tuleap_build
                        pnpm config set "//registry.npmjs.org/:_authToken" "${NPM_TOKEN}"
                        pnpm publish --access public --filter "@tuleap/*" --no-git-checks
                        '''
                    }
                }
            }
        }
    }
}
