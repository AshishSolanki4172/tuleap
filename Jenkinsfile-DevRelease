#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'sources']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitolite-tuleap-net', url: 'ssh://gitolite@tuleap.net/tuleap/tuleap/stable.git']]]
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                script {
                    actions = load 'sources/tests/actions.groovy'
                    actions.prepareSources('nexus.enalean.com_readonly')
                }
            }
        }

        stage('Check lockfiles') {
            steps { script {
                dir ('sources/plugins/baseline') {
                    sh "../../tests/files_status_checker/verify.sh lockfiles package-lock.json composer.lock"
                }
            } }
            post {
                failure {
                    dir ('sources/plugins/baseline') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('UT SimpleTest PHP 7.2') {
                    steps { script { actions.runSimpleTestTests('72') } }
                    post { always { junit 'results/ut-simpletest/php-72/results.xml' } }
                }
                stage('UT PHPUnit') {
                    stages {
                        stage('UT PHPUnit PHP 7.2') { steps { script { actions.runPHPUnitTests('72') } } }
                    }
                    post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
                }
                stage('REST') {
                    stages {
                        stage('REST CentOS 6 PHP 7.2 MySQL 5.7') {
                            steps { script { actions.runRESTTests('c6-php72-mysql57') } }
                        }
                    }
                    post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                }
                stage('SOAP') {
                    stages {
                        stage('SOAP PHP 7.2') { steps { script { actions.runSOAPTests('php-72', '4') } } }
                    }
                    post { always { junit "results/api-soap/*/soap_tests.xml" } }
                }
                stage('Check translation files') {
                    steps { script {
                        dir ('sources/plugins/baseline') {
                            sh "../../tests/files_status_checker/verify.sh 'translation files' '*.po\$'"
                        }
                    } }
                }
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                }
            }
        }

        stage('Build RPM') {
            steps {
                script {
                    dir ('sources/plugins/baseline') {
                        sh "TULEAP_PATH=${WORKSPACE}/sources WORKSPACE=${WORKSPACE}/packages ./build-rpm.sh"
                    }
                }
            }
            post {
                always {
                    archiveArtifacts "${WORKSPACE}/packages/*.rpm"
                }
            }
        }

        stage('Antiviral scan') {
            def lib = new org.tuleap.Build();
            lib.antiviralScan(pwd() + '/packages/')
        }

        stage('Build repositories') {
            docker.image('nexus.enalean.com:20000/createrepo').inside() {
                sh 'createrepo --checksum=sha256 --compress-type=gz packages/'
            }
        }

        stage('Sign repositories metadata') {
            def lib_signing = new org.tuleap.Signing();
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'vault-role-enterprise-signing-key', passwordVariable: 'SECRET_ID', usernameVariable: 'ROLE_ID']]) {
                lib_signing.signRepositories(pwd() + '/packages/', env.VAULT, env.ROLE_ID, env.SECRET_ID, 'gpg/sign/tuleap-enterprise-rpm-signing');
            }
        }

        stage('Publish repositories') {
            docker.image('nexus.enalean.com:20000/rsync').inside('-v /jenkins/.ssh:/root/.ssh -u root') {
                sshagent(['enalean_packages-my-enalean-com']) {
                    sh """
                    DISTRIBUTION=dev
                    OS='rhel6 rhel7'

                    for i in \$OS; do
                        ##ssh enalean_packages@my.enalean.com mkdir -p /var/lib/enalean_packages/yum/tuleap-baseline/\$DISTRIBUTION/\$i
                        #rsync -r --delete-after ${WORKSPACE}/packages/ enalean_packages@my.enalean.com:/var/lib/enalean_packages/yum/tuleap-baseline/\$DISTRIBUTION/\$i/noarch
                    done
                    """
                }
            }
        }
    }
}
